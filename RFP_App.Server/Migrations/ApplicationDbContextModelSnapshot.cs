// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RFP_APP.Server.Data;

#nullable disable

namespace RFP_APP.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RFP_APP.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AccountCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("ActiveBids")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CompletedProjects")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rating")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AccountCreated = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(135),
                            ActiveBids = 0,
                            CompletedProjects = 0,
                            ConcurrencyStamp = "af59555b-cc03-4962-ab59-3c5559977110",
                            DateOfBirth = new DateTime(1995, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Rating = 0m,
                            SecurityStamp = "f0823d35-07a4-4712-9467-83b822ff2a06",
                            TwoFactorEnabled = false,
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            AccountCreated = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(161),
                            ActiveBids = 0,
                            CompletedProjects = 0,
                            ConcurrencyStamp = "66eb1667-fd02-4d4e-b03e-4917b1178c54",
                            DateOfBirth = new DateTime(1992, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Rating = 0m,
                            SecurityStamp = "8e0c1267-330d-4e6b-b7f9-8a41325ae501",
                            TwoFactorEnabled = false,
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            AccountCreated = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(185),
                            ActiveBids = 0,
                            CompletedProjects = 0,
                            ConcurrencyStamp = "5a97755f-4d10-4bdd-bb93-88fe0a22344a",
                            DateOfBirth = new DateTime(1988, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Brown",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Rating = 0m,
                            SecurityStamp = "d2da43db-b156-4169-a7f0-d821d41424b9",
                            TwoFactorEnabled = false,
                            UserName = "user3@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            AccountCreated = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(207),
                            ActiveBids = 0,
                            CompletedProjects = 0,
                            ConcurrencyStamp = "a973a51a-3c44-41a7-871a-f94f71303465",
                            DateOfBirth = new DateTime(2000, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Rating = 0m,
                            SecurityStamp = "7f791fc0-b972-42fe-8514-b73b023ae69b",
                            TwoFactorEnabled = false,
                            UserName = "user4@example.com"
                        });
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProposalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewedUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReviewedUserId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Excellent work!",
                            CreatedAt = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(506),
                            Rating = 5,
                            ReviewedUserId = "3",
                            ReviewerId = "2",
                            ServiceRequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Good job!",
                            CreatedAt = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(509),
                            Rating = 4,
                            ReviewedUserId = "4",
                            ReviewerId = "3",
                            ServiceRequestId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "It was okay",
                            CreatedAt = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(511),
                            Rating = 3,
                            ReviewedUserId = "5",
                            ReviewerId = "4",
                            ServiceRequestId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Not satisfied",
                            CreatedAt = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(513),
                            Rating = 2,
                            ReviewedUserId = "2",
                            ReviewerId = "5",
                            ServiceRequestId = 4
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Terrible experience",
                            CreatedAt = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(514),
                            Rating = 1,
                            ReviewedUserId = "5",
                            ReviewerId = "2",
                            ServiceRequestId = 5
                        });
                });

            modelBuilder.Entity("RFP_APP.Server.Models.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Budget")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ServiceRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Budget = 5000m,
                            City = "New York",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(442),
                            CreatorId = "2",
                            Deadline = new DateTime(2025, 4, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(443),
                            Description = "Need a full-stack developer to build a modern website with React and ASP.NET Core.",
                            PostalCode = "10001",
                            RequestType = 1,
                            State = "NY",
                            StreetAddress = "123 Main Street",
                            Title = "Website Development"
                        },
                        new
                        {
                            Id = 2,
                            Budget = 10000m,
                            City = "San Francisco",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(456),
                            CreatorId = "3",
                            Deadline = new DateTime(2025, 5, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(457),
                            Description = "Looking for an experienced mobile developer to create an iOS and Android app.",
                            PostalCode = "94103",
                            RequestType = 2,
                            State = "CA",
                            StreetAddress = "456 Market Street",
                            Title = "Mobile App Development"
                        },
                        new
                        {
                            Id = 3,
                            Budget = 1500m,
                            City = "Los Angeles",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(460),
                            CreatorId = "3",
                            Deadline = new DateTime(2025, 4, 7, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(460),
                            Description = "Need a creative designer for logo and branding package.",
                            PostalCode = "90015",
                            RequestType = 3,
                            State = "CA",
                            StreetAddress = "789 Broadway",
                            Title = "Graphic Design - Logo & Branding"
                        },
                        new
                        {
                            Id = 4,
                            Budget = 3000m,
                            City = "Austin",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(467),
                            CreatorId = "4",
                            Deadline = new DateTime(2025, 4, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(468),
                            Description = "Need an SEO expert to improve rankings for an e-commerce store.",
                            PostalCode = "73301",
                            RequestType = 6,
                            State = "TX",
                            StreetAddress = "100 Tech Park",
                            Title = "SEO Optimization for E-commerce Website"
                        },
                        new
                        {
                            Id = 5,
                            Budget = 8000m,
                            City = "Washington",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(470),
                            CreatorId = "5",
                            Deadline = new DateTime(2025, 5, 17, 8, 12, 4, 580, DateTimeKind.Utc).AddTicks(471),
                            Description = "Seeking a cybersecurity expert to conduct a full security audit and penetration testing.",
                            PostalCode = "20001",
                            RequestType = 12,
                            State = "DC",
                            StreetAddress = "200 Security Blvd",
                            Title = "Cybersecurity Audit & Penetration Testing"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Message", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.Proposal", "Proposal")
                        .WithMany()
                        .HasForeignKey("ProposalId");

                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Notification", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Proposal", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Creator")
                        .WithMany("Proposals")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFP_APP.Server.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("Proposals")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Review", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "ReviewedUser")
                        .WithMany()
                        .HasForeignKey("ReviewedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RFP_APP.Server.Models.ServiceRequest", "ServiceRequest")
                        .WithMany()
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewedUser");

                    b.Navigation("Reviewer");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.ServiceRequest", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Creator")
                        .WithMany("ServiceRequest")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.ApplicationUser", b =>
                {
                    b.Navigation("Proposals");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.ServiceRequest", b =>
                {
                    b.Navigation("Proposals");
                });
#pragma warning restore 612, 618
        }
    }
}
