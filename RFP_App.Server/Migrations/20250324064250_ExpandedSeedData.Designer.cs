// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RFP_APP.Server.Data;

#nullable disable

namespace RFP_APP.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250324064250_ExpandedSeedData")]
    partial class ExpandedSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RFP_APP.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AccountCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("ActiveBids")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CompletedProjects")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rating")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProposalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Hi, I’m interested in your portfolio project.",
                            ProposalId = 1,
                            ReceiverId = "user1-id",
                            SenderId = "user2-id",
                            SentAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9150)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Thanks! Let’s schedule a quick call.",
                            ProposalId = 1,
                            ReceiverId = "user2-id",
                            SenderId = "user1-id",
                            SentAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9150)
                        },
                        new
                        {
                            Id = 3,
                            Content = "Attached is my proposal draft.",
                            ProposalId = 2,
                            ReceiverId = "user2-id",
                            SenderId = "user1-id",
                            SentAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9150)
                        },
                        new
                        {
                            Id = 4,
                            Content = "Do you also handle mobile redesigns?",
                            ProposalId = 3,
                            ReceiverId = "user1-id",
                            SenderId = "user2-id",
                            SentAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9150)
                        },
                        new
                        {
                            Id = 5,
                            Content = "Yes, I specialize in mobile UI/UX.",
                            ProposalId = 3,
                            ReceiverId = "user2-id",
                            SenderId = "user1-id",
                            SentAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9150)
                        },
                        new
                        {
                            Id = 6,
                            Content = "SEO report attached. Let me know.",
                            ProposalId = 4,
                            ReceiverId = "user1-id",
                            SenderId = "user2-id",
                            SentAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9160)
                        });
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("Proposals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BidAmount = 2800m,
                            CreatorId = "user2-id",
                            Description = "Experienced full-stack dev available.",
                            ServiceRequestId = 1,
                            Status = 0,
                            SubmittedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8960)
                        },
                        new
                        {
                            Id = 2,
                            BidAmount = 1000m,
                            CreatorId = "user1-id",
                            Description = "Offering high-quality design concepts.",
                            ServiceRequestId = 2,
                            Status = 1,
                            SubmittedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8960)
                        },
                        new
                        {
                            Id = 3,
                            BidAmount = 4300m,
                            CreatorId = "user2-id",
                            Description = "Skilled UI/UX designer for mobile projects.",
                            ServiceRequestId = 3,
                            Status = 0,
                            SubmittedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8970)
                        },
                        new
                        {
                            Id = 4,
                            BidAmount = 2300m,
                            CreatorId = "user1-id",
                            Description = "SEO expert with proven results.",
                            ServiceRequestId = 4,
                            Status = 2,
                            SubmittedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8970)
                        },
                        new
                        {
                            Id = 5,
                            BidAmount = 1600m,
                            CreatorId = "user2-id",
                            Description = "Creative writer with tech blog experience.",
                            ServiceRequestId = 5,
                            Status = 1,
                            SubmittedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8970)
                        },
                        new
                        {
                            Id = 6,
                            BidAmount = 3700m,
                            CreatorId = "user1-id",
                            Description = "Bonus offer for redesign and branding.",
                            ServiceRequestId = 1,
                            Status = 0,
                            SubmittedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8970)
                        });
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewedUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReviewedUserId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Great experience working with you!",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9000),
                            Rating = 5,
                            ReviewedUserId = "user2-id",
                            ReviewerId = "user1-id",
                            ServiceRequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Delivered design on time and to spec.",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9010),
                            Rating = 4,
                            ReviewedUserId = "user1-id",
                            ReviewerId = "user2-id",
                            ServiceRequestId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Good communication, average work.",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9010),
                            Rating = 3,
                            ReviewedUserId = "user2-id",
                            ReviewerId = "user1-id",
                            ServiceRequestId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Project was delayed and needed revisions.",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9010),
                            Rating = 2,
                            ReviewedUserId = "user1-id",
                            ReviewerId = "user2-id",
                            ServiceRequestId = 4
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Excellent writing, very happy!",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9010),
                            Rating = 5,
                            ReviewedUserId = "user2-id",
                            ReviewerId = "user1-id",
                            ServiceRequestId = 5
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Prompt delivery and great support.",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(9010),
                            Rating = 4,
                            ReviewedUserId = "user1-id",
                            ReviewerId = "user2-id",
                            ServiceRequestId = 1
                        });
                });

            modelBuilder.Entity("RFP_APP.Server.Models.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Budget")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ServiceRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Budget = 3000m,
                            City = "New York",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8700),
                            CreatorId = "user1-id",
                            Deadline = new DateTime(2025, 4, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8700),
                            Description = "React/ASP.NET portfolio site.",
                            PostalCode = "10001",
                            RequestType = 1,
                            State = "NY",
                            StreetAddress = "123 Elm Street",
                            Title = "Build Personal Portfolio"
                        },
                        new
                        {
                            Id = 2,
                            Budget = 1200m,
                            City = "Boston",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8710),
                            CreatorId = "user2-id",
                            Deadline = new DateTime(2025, 4, 14, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8710),
                            Description = "Need creative logo and brand design.",
                            PostalCode = "02118",
                            RequestType = 3,
                            State = "MA",
                            StreetAddress = "456 Oak Avenue",
                            Title = "Logo Design Needed"
                        },
                        new
                        {
                            Id = 3,
                            Budget = 4500m,
                            City = "Chicago",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8720),
                            CreatorId = "user1-id",
                            Deadline = new DateTime(2025, 4, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8720),
                            Description = "Redesign the UI for a food delivery app.",
                            PostalCode = "60614",
                            RequestType = 2,
                            State = "IL",
                            StreetAddress = "789 Pine Street",
                            Title = "Mobile App UI Redesign"
                        },
                        new
                        {
                            Id = 4,
                            Budget = 2500m,
                            City = "Seattle",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8720),
                            CreatorId = "user2-id",
                            Deadline = new DateTime(2025, 4, 23, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8720),
                            Description = "Improve website traffic and Google ranking.",
                            PostalCode = "98101",
                            RequestType = 6,
                            State = "WA",
                            StreetAddress = "321 Maple Lane",
                            Title = "SEO Optimization Project"
                        },
                        new
                        {
                            Id = 5,
                            Budget = 1800m,
                            City = "Austin",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 24, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8730),
                            CreatorId = "user1-id",
                            Deadline = new DateTime(2025, 4, 7, 6, 42, 49, 682, DateTimeKind.Utc).AddTicks(8730),
                            Description = "Need engaging articles for tech blog.",
                            PostalCode = "73301",
                            RequestType = 4,
                            State = "TX",
                            StreetAddress = "654 Birch Blvd",
                            Title = "Content Writing for Blog"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Message", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.Proposal", "Proposal")
                        .WithMany()
                        .HasForeignKey("ProposalId");

                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Notification", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Proposal", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Creator")
                        .WithMany("Proposals")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFP_APP.Server.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("Proposals")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.Review", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "ReviewedUser")
                        .WithMany()
                        .HasForeignKey("ReviewedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RFP_APP.Server.Models.ServiceRequest", "ServiceRequest")
                        .WithMany()
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewedUser");

                    b.Navigation("Reviewer");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.ServiceRequest", b =>
                {
                    b.HasOne("RFP_APP.Server.Models.ApplicationUser", "Creator")
                        .WithMany("ServiceRequest")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.ApplicationUser", b =>
                {
                    b.Navigation("Proposals");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("RFP_APP.Server.Models.ServiceRequest", b =>
                {
                    b.Navigation("Proposals");
                });
#pragma warning restore 612, 618
        }
    }
}
